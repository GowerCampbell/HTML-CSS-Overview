
# HTML and CSS Best Practices Guide

This guide outlines best practices for writing clean, maintainable, and standards-compliant HTML and CSS code.

## HTML Coding Practices

### Write Standards-Compliant Markup
Ensure proper nesting, closing of elements, and appropriate use of IDs and classes. Validate code to meet standards.
```html
<!-- Incorrect: Duplicate IDs and improper nesting -->
<p id="intro">New items on the menu today include <strong>caramel apple cider and breakfast crepes</p>.</strong>
<p id="intro">The caramel apple cider is delicious.</p>

<!-- Correct: Use classes for reusable styles -->
<p class="intro">New items on the menu today include <strong>caramel apple cider and breakfast crepes</strong>.</p>
<p class="intro">The caramel apple cider is delicious.</p>
```

### Use Semantic Elements
Choose elements that convey meaning (e.g., `<h1>`, `<article>`) to improve accessibility and styling.
```html
<!-- Incorrect: Non-semantic elements -->
<span class="heading"><strong>Welcome Back</span></strong>
<br><br>
It has been a while. What have you been up to lately?
<br><br>

<!-- Correct: Semantic elements -->
<h1>Welcome Back</h1>
<p>It has been a while. What have you been up to lately?</p>
```

### Use Proper Document Structure
Include `<!DOCTYPE html>`, `<html>`, `<head>`, and `<body>` for a complete, standards-compliant document.
```html
<!-- Incorrect: Missing structure -->
<html>
  <h1>Hello World</h1>
  <p>This is a web page.</p>
</html>

<!-- Correct: Proper structure -->
<!DOCTYPE html>
<html lang="en">
  <head>
    <title>Hello World</title>
  </head>
  <body>
    <h1>Hello World</h1>
    <p>This is a web page.</p>
  </body>
</html>
```

### Keep Syntax Organized
- Use snake_case for attributes and values.
- Indent nested elements.
- Use double quotes for attribute values.
- Omit forward slashes in self-closing tags.
- Omit values for boolean attributes.
```html
<!-- Incorrect: Inconsistent syntax -->
<Aside>
<h3>Chicago</h3>
<H5 HIDDEN='HIDDEN'>City in Illinois</H5>
<img src=chicago.jpg alt="Chicago, the third most populous city in the United States" />
<ul>
<li>234 square miles</li>
<li>2.715 million residents</li>
</ul>
</ASIDE>

<!-- Correct: Organized syntax -->
<aside>
  <h3>Chicago</h3>
  <h5 hidden>City in Illinois</h5>
  <img src="chicago.jpg" alt="Chicago, the third most populous city in the United States">
  <ul>
    <li>234 square miles</li>
    <li>2.715 million residents</li>
  </ul>
</aside>
```

### Use Practical ID and Class Values
Choose descriptive, content-related names for IDs and classes.
```html
<!-- Incorrect: Non-descriptive class -->
<p class="red">Error! Please try again.</p>

<!-- Correct: Descriptive class -->
<p class="alert">Error! Please try again.</p>
```

### Use Alternative Text for Images
Always include the `alt` attribute for accessibility.
```html
<!-- Incorrect: Missing alt -->
<img src="puppy.jpg">

<!-- Correct: Descriptive alt -->
<img src="puppy.jpg" alt="A beautiful, two-year-old hound mix puppy">
```

### Separate Content from Style
Avoid inline CSS; use external stylesheets or classes.
```html
<!-- Incorrect: Inline styles -->
<p style="color: #393; font-size: 24px;">Thank you!</p>

<!-- Correct: Class-based styling -->
<p class="alert-success">Thank you!</p>
```

### Avoid "Divitis"
Use semantic elements instead of excessive `<div>` tags.
```html
<!-- Incorrect: Overuse of divs -->
<div class="container">
  <div class="article">
    <div class="headline">Headlines Across the World</div>
  </div>
</div>

<!-- Correct: Semantic markup -->
<div class="container">
  <article>
    <h1>Headlines Across the World</h1>
  </article>
</div>
```

### Continually Refactor Code
Regularly review and remove redundant or outdated code.

## CSS Coding Practices

### Organize Code with Comments
Group selectors into logical sections with descriptive comments.
```css
/* Incorrect: No organization */
header { ... }
article { ... }
.btn { ... }

/* Correct: Organized with comments */
/* Primary header */
header { ... }

/* Featured article */
article { ... }

/* Buttons */
.btn { ... }
```

### Write CSS Using Multiple Lines and Spaces
Format each selector and declaration for readability.
```css
/* Incorrect: Single line */
a,.btn{background:#aaa;color:#f60;font-size:18px;padding:6px;}

/* Correct: Multi-line with spacing */
a,
.btn {
  background: #aaa;
  color: #f60;
  font-size: 18px;
  padding: 6px;
}
```

### Use Proper Class Names
Use modular, content-related class names.
```css
/* Incorrect: Appearance-based */
.Red_Box { ... }

/* Correct: Content-based */
.alert-message { ... }
```

### Build Proficient Selectors
Keep selectors short and specific to reduce complexity and specificity. Avoid overusing IDs.
```css
/* Incorrect: Overly specific */
#aside #featured ul.news li a { ... }
#aside #featured ul.news li a em.special { ... }

/* Correct: Simplified selectors */
.news a { ... }
.news .special { ... }
```

### Use Specific Classes When Necessary
Replace long selectors with concise classes.
```css
/* Incorrect: Long selector */
section aside h1 em { ... }

/* Correct: Specific class */
.text-offset { ... }
```

### Use Shorthand Properties and Values
Combine properties like `margin` and `padding` for brevity.
```css
/* Incorrect: Verbose */
img {
  margin-top: 5px;
  margin-right: 10px;
  margin-bottom: 5px;
  margin-left: 10px;
}
button {
  padding: 0 0 0 20px;
}

/* Correct: Shorthand */
img {
  margin: 5px 10px;
}
button {
  padding-left: 20px;
}
```

### Use Shorthand Hexadecimal Color Values
Use three-character hex codes when possible.
```css
/* Incorrect: Long hex codes */
.module {
  background: #DDDDDD;
  color: #FF6600;
}

/* Correct: Shorthand hex codes */
.module {
  background: #ddd;
  color: #f60;
}
```

### Drop Units from Zero Values
Omit units for zero values to reduce code.
```css
/* Incorrect: Unnecessary units */
div {
  margin: 20px 0px;
  letter-spacing: 0%;
  padding: 0px 5px;
}

/* Correct: No units for zero */
div {
  margin: 20px 0;
  letter-spacing: 0;
  padding: 0 5px;
}
```

### Group and Align Vendor Prefixes
Align vendor-prefixed properties for readability, placing the unprefixed version last.
```css
/* Incorrect: Misaligned prefixes */
div {
  background: -webkit-linear-gradient(#a1d3b0, #f6f1d3);
  background: -moz-linear-gradient(#a1d3b0, #f6f1d3);
  background: linear-gradient(#a1d3b0, #f6f1d3);
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
}

/* Correct: Aligned prefixes */
div {
  background: -webkit-linear-gradient(#a1d3b0, #f6f1d3);
  background:    -moz-linear-gradient(#a1d3b0, #f6f1d3);
  background:         linear-gradient(#a1d3b0, #f6f1d3);
  -webkit-box-sizing: border-box;
     -moz-box-sizing: border-box;
          box-sizing: border-box;
}
```

### Modularize Styles for Reuse
Create reusable classes for common styles.
```css
/* Incorrect: Repeated styles */
.news {
  background: #eee;
  border: 1px solid #ccc;
  border-radius: 6px;
}
.events {
  background: #eee;
  border: 1px solid #ccc;
  border-radius: 6px;
}

/* Correct: Reusable class */
.feat-box {
  background: #eee;
  border: 1px solid #ccc;
  border-radius: 6px;
}
```

## Resources
### HTML & CSS
- [MDN Web Docs](https://developer.mozilla.org/en-US/)
- [HTML Dog](http://www.htmldog.com/)
- [Opera Dev](http://dev.opera.com/)
- [DevDocs](http://devdocs.io/)

### Design Inspiration
- [Dribbble](http://dribbble.com/)
- [Premium Pixels](http://www.premiumpixels.com/)

### Frameworks & Style Guides
- [Web Style Guide](http://webstyleguide.com/wsg3/index.html)
- [Bootstrap](https://getbootstrap.com/)
- [Foundation](http://foundation.zurb.com/)
- [Skeleton](http://getskeleton.com/)
- [Google HTML/CSS Style Guide](https://google.github.io/styleguide/htmlcssguide.html)
- [GitHub Style Guide](https://github.com/styleguide/)

### Icons
- [Helveticons](http://helveticons.ch/)
- [Yusuke Kamiyamane Icons](http://p.yusukekamiyamane.com/)
- [Pictos](http://pictos.cc/)
- [The Noun Project](http://thenounproject.com/)
- [Ionicons](http://ionicons.com/)
- [Silk Icons](http://www.famfamfam.com/lab/icons/silk/)
- [Picons](http://picons.me/)

### Miscellaneous
- [Colour Lovers](http://www.colourlovers.com/)
- [ColorHexa](https://www.colorhexa.com/)
- [Modernizr](http://modernizr.com/)
- [jQuery](http://jquery.com/)
- [Google Hosted Libraries](https://developers.google.com/speed/libraries/devguide)
- [Copy Paste Character](http://copypastecharacter.com/)

## Summary
- **HTML Practices**: Write standards-compliant, semantic, and organized code with proper document structure, descriptive IDs/classes, and accessible attributes like `alt`.
- **CSS Practices**: Organize with comments, use readable formatting, modular class names, efficient selectors, shorthand properties, and aligned vendor prefixes.
- **General**: Continually refactor code and leverage reusable styles for maintainability.
